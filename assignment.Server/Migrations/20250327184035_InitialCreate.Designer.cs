// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using assignment.Server.Data;

#nullable disable

namespace assignment.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250327184035_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("assignment.Server.Models.Chef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chefs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "An experienced chef with a passion for Italian cuisine.",
                            ContactInfo = "chef.john@example.com",
                            Email = "chef.john@example.com",
                            Location = "New York",
                            Name = "Chef John",
                            PictureUrl = "https://example.com/chef-john.jpg",
                            Specialty = "Italian Cuisine"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "A pastry chef known for her delicious desserts.",
                            ContactInfo = "chef.jane@example.com",
                            Email = "chef.jane@example.com",
                            Location = "Los Angeles",
                            Name = "Chef Jane",
                            PictureUrl = "https://example.com/chef-jane.jpg",
                            Specialty = "Pastry"
                        });
                });

            modelBuilder.Entity("assignment.Server.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChefId")
                        .HasColumnType("int");

                    b.Property<int>("CookingTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChefId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChefId = 1,
                            CookingTime = 30,
                            CreatedAt = new DateTime(2024, 3, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Classic Italian pasta dish with eggs, cheese, and pancetta",
                            Difficulty = "medium",
                            ImageUrl = "https://example.com/carbonara.jpg",
                            Ingredients = "Spaghetti, eggs, pancetta, Parmesan cheese, black pepper",
                            Instructions = "Cook spaghetti. Fry pancetta. Mix eggs and cheese. Combine all with spaghetti.",
                            Likes = 0,
                            Title = "Spaghetti Carbonara"
                        },
                        new
                        {
                            Id = 2,
                            ChefId = 2,
                            CookingTime = 45,
                            CreatedAt = new DateTime(2024, 3, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Traditional Italian dessert with coffee-soaked ladyfingers and mascarpone cream",
                            Difficulty = "medium",
                            ImageUrl = "https://example.com/tiramisu.jpg",
                            Ingredients = "Ladyfingers, mascarpone cheese, eggs, sugar, coffee, cocoa powder",
                            Instructions = "Dip ladyfingers in coffee. Layer with mascarpone mixture. Dust with cocoa.",
                            Likes = 0,
                            Title = "Classic Tiramisu"
                        });
                });

            modelBuilder.Entity("assignment.Server.Models.Recipe", b =>
                {
                    b.HasOne("assignment.Server.Models.Chef", "Chef")
                        .WithMany("Recipes")
                        .HasForeignKey("ChefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");
                });

            modelBuilder.Entity("assignment.Server.Models.Chef", b =>
                {
                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
